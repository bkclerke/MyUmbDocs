@inherits UmbracoViewPage<PcGridLayout>
@{
    // SETUP COMPONENT ID
    string componentId = "pc-grid-layout-" + Model.Id;

    // -----------------------------
    // COMPONENT SETTINGS
    // -----------------------------

    // SETUP BACKGROUND
    string areaBgColor = string.Empty;
    string themeClass = string.Empty;
    bool hasAreaBgImage = Model.HasValue("areaBgImage");
    string areaBgImagePosition = !string.IsNullOrEmpty(Model.Value<string>("areaBgImagePosition")) ? Model.Value<string>("areaBgImagePosition").ToLower() : "center center";
    string areaBgSize = !string.IsNullOrEmpty(Model.Value<string>("areaBgSize")) ? Model.Value<string>("areaBgSize").ToLower() : "auto";
    string areaBgRepeat = !string.IsNullOrEmpty(Model.Value<string>("areaBgRepeat")) ? Model.Value<string>("areaBgRepeat").ToLower() : "no-repeat";

    if (!hasAreaBgImage)
    {
        // SET BACKGROUND COLOR IF NO BACKGROUND IMAGE
        areaBgColor = Model.HasValue("areaBgColor") ? Model.Value<string>("areaBgColor") : string.Empty;
        switch (areaBgColor)
        {
            // TODO: CONFIGURE APPROVED COLOR PICKER AND SET THEME CLASS
            default:
                break;
        }
    }
    else if (hasAreaBgImage)
    {
        // SETUP STYLES FOR IMAGE BACKGROUND
        var media = Model.Value<IPublishedContent>("areaBgImage");
        if (media != null)
        {
            string areaBgUrl = Model.Value<IPublishedContent>("areaBgImage").Url;

            <text>
                <style>
                    .@(componentId) {
                        background-image:url("@(areaBgUrl)");
                        background-position: @(areaBgImagePosition);
                        background-size: @(areaBgSize);
                        background-repeat: @(areaBgRepeat);
                    }
                </style>
            </text>
        }
    }

    // COMPONENT SPACING
    string topSpace = !string.IsNullOrEmpty(Model.Value<string>("areaTopSpace")) ? Model.Value<string>("areaTopSpace") : string.Empty;
    if (!string.IsNullOrEmpty(topSpace))
    {
        switch (topSpace)
        {
            case "Small":
                topSpace = "pt-sm";
                break;
            case "Medium":
                topSpace = "pt-md";
                break;
            case "Large":
                topSpace = "pt-lg";
                break;
            default:
                topSpace = string.Empty;
                break;
        }
    }
    string btmSpace = !string.IsNullOrEmpty(Model.Value<string>("areaBottomSpace")) ? Model.Value<string>("areaBottomSpace") : string.Empty;
    if (!string.IsNullOrEmpty(btmSpace))
    {
        switch (btmSpace)
        {
            case "Small":
                btmSpace = "pb-sm";
                break;
            case "Medium":
                btmSpace = "pb-md";
                break;
            case "Large":
                btmSpace = "pb-lg";
                break;
            default:
                btmSpace = string.Empty;
                break;
        }
    }

    <div id="@componentId" class="pc-grid-layout @themeClass @areaBgColor @topSpace @btmSpace">
        @Html.GetGridHtml(Model, "grid", "Bootstrap3")
    </div>
}
